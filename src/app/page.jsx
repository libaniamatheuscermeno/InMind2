'use client';

import { useState, useCallback } from "react";
import {
  MessageCircle,
  Globe,
  Stethoscope,
  AlertTriangle,
  Lightbulb,
  ArrowRight,
  HelpCircle,
  Download,
} from "lucide-react";

const languages = {
  en: { name: "English", flag: "üá∫üá∏" },
  es: { name: "Espa√±ol", flag: "üá™üá∏" },
  pt: { name: "Portugu√™s", flag: "üáßüá∑" },
  fr: { name: "Fran√ßais", flag: "üá´üá∑" },
};

const translations = {
  en: {
    title: "InMind.",
    subtitle: "AI-Powered Neurological Diagnostic Assistant",
    disclaimer:
      "This tool is for educational purposes only and should not replace professional medical advice.",
    diagnosisTab: "Diagnosis",
    questionsTab: "Medical Q&A",
    faqTab: "FAQ",
    symptomsPlaceholder:
      "Describe your symptoms in detail (e.g., memory loss, tremors, difficulty walking, speech problems...)",
    questionPlaceholder: "Ask any health or medicine related question...",
    analyze: "Analyze Symptoms",
    askQuestion: "Ask Question",
    analyzing: "Analyzing...",
    asking: "Processing...",
    results: "Analysis Results",
    answer: "Answer",
    downloadChat: "Download Chat",
    faqTitle: "Frequently Asked Questions",
    faqs: [
      {
        question: "How accurate are the diagnostic suggestions?",
        answer:
          "InMind provides educational insights based on symptom analysis, but should never replace professional medical diagnosis. Always consult healthcare professionals for accurate diagnosis and treatment.",
      },
      {
        question: "What neurodegenerative diseases can be analyzed?",
        answer:
          "Our AI can analyze symptoms related to Alzheimer's, Parkinson's, ALS, Huntington's disease, Multiple Sclerosis, and other neurological conditions.",
      },
      {
        question: "Is my health information secure?",
        answer:
          "We do not store personal health information. All conversations are processed securely and are not saved on our servers.",
      },
      {
        question: "Can I use this tool for someone else?",
        answer:
          "Yes, you can describe symptoms for family members or others, but remember this is for educational purposes only.",
      },
      {
        question: "What should I do after getting results?",
        answer:
          "Use the results as a starting point for discussion with healthcare professionals. Schedule appointments with recommended specialists for proper evaluation.",
      },
    ],
  },
  es: {
    title: "InMind.",
    subtitle: "Asistente de Diagn√≥stico Neurol√≥gico con IA",
    disclaimer:
      "Esta herramienta es solo para fines educativos y no debe reemplazar el consejo m√©dico profesional.",
    diagnosisTab: "Diagn√≥stico",
    questionsTab: "Preguntas M√©dicas",
    faqTab: "Preguntas Frecuentes",
    symptomsPlaceholder:
      "Describe tus s√≠ntomas en detalle (ej: p√©rdida de memoria, temblores, dificultad para caminar, problemas del habla...)",
    questionPlaceholder:
      "Haz cualquier pregunta relacionada con salud o medicina...",
    analyze: "Analizar S√≠ntomas",
    askQuestion: "Hacer Pregunta",
    analyzing: "Analizando...",
    asking: "Procesando...",
    results: "Resultados del An√°lisis",
    answer: "Respuesta",
    downloadChat: "Descargar Chat",
    faqTitle: "Preguntas Frecuentes",
    faqs: [
      {
        question: "¬øQu√© tan precisas son las sugerencias de diagn√≥stico?",
        answer:
          "InMind proporciona informaci√≥n educativa basada en an√°lisis de s√≠ntomas, pero nunca debe reemplazar el diagn√≥stico m√©dico profesional. Siempre consulte a profesionales de la salud para un diagn√≥stico y tratamiento precisos.",
      },
      {
        question: "¬øQu√© enfermedades neurodegenerativas se pueden analizar?",
        answer:
          "Nuestra IA puede analizar s√≠ntomas relacionados con Alzheimer, Parkinson, ELA, enfermedad de Huntington, Esclerosis M√∫ltiple y otras condiciones neurol√≥gicas.",
      },
      {
        question: "¬øEs segura mi informaci√≥n de salud?",
        answer:
          "No almacenamos informaci√≥n personal de salud. Todas las conversaciones se procesan de forma segura y no se guardan en nuestros servidores.",
      },
      {
        question: "¬øPuedo usar esta herramienta para otra persona?",
        answer:
          "S√≠, puedes describir s√≠ntomas para familiares u otros, pero recuerda que esto es solo para fines educativos.",
      },
      {
        question: "¬øQu√© debo hacer despu√©s de obtener los resultados?",
        answer:
          "Usa los resultados como punto de partida para discutir con profesionales de la salud. Programa citas con especialistas recomendados para una evaluaci√≥n adecuada.",
      },
    ],
  },
  pt: {
    title: "InMind.",
    subtitle: "Assistente de Diagn√≥stico Neurol√≥gico com IA",
    disclaimer:
      "Esta ferramenta √© apenas para fins educacionais e n√£o deve substituir o conselho m√©dico profissional.",
    diagnosisTab: "Diagn√≥stico",
    questionsTab: "Perguntas M√©dicas",
    faqTab: "Perguntas Frequentes",
    symptomsPlaceholder:
      "Descreva seus sintomas em detalhes (ex: perda de mem√≥ria, tremores, dificuldade para caminhar, problemas de fala...)",
    questionPlaceholder:
      "Fa√ßa qualquer pergunta relacionada √† sa√∫de ou medicina...",
    analyze: "Analisar Sintomas",
    askQuestion: "Fazer Pergunta",
    analyzing: "Analisando...",
    asking: "Processando...",
    results: "Resultados da An√°lise",
    answer: "Resposta",
    downloadChat: "Baixar Chat",
    faqTitle: "Perguntas Frequentes",
    faqs: [
      {
        question: "Qu√£o precisas s√£o as suger√™ncias de diagn√≥stico?",
        answer:
          "O InMind fornece informa√ß√µes educacionais baseadas em an√°lise de sintomas, mas nunca deve substituir o diagn√≥stico m√©dico profissional. Sempre consulte profissionais de sa√∫de para diagn√≥stico e tratamento precisos.",
      },
      {
        question: "Quais doen√ßas neurodegenerativas podem ser analisadas?",
        answer:
          "Nossa IA pode analisar sintomas relacionados ao Alzheimer, Parkinson, ELA, doen√ßa de Huntington, Esclerose M√∫ltipla e outras condi√ß√µes neurol√≥gicas.",
      },
      {
        question: "Minhas informa√ß√µes de sa√∫de est√£o seguras?",
        answer:
          "N√£o armazenamos informa√ß√µes pessoais de sa√∫de. Todas as conversas s√£o processadas com seguran√ßa e n√£o s√£o salvas em nossos servidores.",
      },
      {
        question: "Posso usar esta ferramenta para outra pessoa?",
        answer:
          "Sim, voc√™ pode descrever sintomas para familiares ou outros, mas lembre-se de que isso √© apenas para fins educacionais.",
      },
      {
        question: "O que devo fazer ap√≥s obter os resultados?",
        answer:
          "Use os resultados como ponto de partida para discuss√£o com profissionais de la sa√∫de. Agende consultas com especialistas recomendados para avalia√ß√£o adequada.",
      },
    ],
  },
  fr: {
    title: "InMind.",
    subtitle: "Assistant de Diagnostic Neurologique IA",
    disclaimer:
      "Cet outil est √† des fins √©ducatives uniquement et ne doit pas remplacer les conseils m√©dicaux professionnels.",
    diagnosisTab: "Diagnostic",
    questionsTab: "Questions M√©dicales",
    faqTab: "FAQ",
    symptomsPlaceholder:
      "D√©crivez vos sympt√¥mes en d√©tail (ex: perte de m√©moire, tremblements, difficult√© √† marcher, probl√®mes d'√©locution...)",
    questionPlaceholder:
      "Posez toute question li√©e √† la sant√© ou √† la m√©decine...",
    analyze: "Analyser les Sympt√¥mes",
    askQuestion: "Poser une Question",
    analyzing: "Analyse en cours...",
    asking: "Traitement...",
    results: "R√©sultats de l'Analyse",
    answer: "R√©ponse",
    downloadChat: "T√©l√©charger Chat",
    faqTitle: "Questions Fr√©quemment Pos√©es",
    faqs: [
      {
        question: "Quelle est la pr√©cision des suggestions de diagnostic?",
        answer:
          "InMind fournit des informations √©ducatives bas√©es sur l'analyse des sympt√¥mes, mais ne doit jamais remplacer un diagnostic m√©dical professionnel. Consultez toujours des professionnels de la sant√© pour un diagnostic et un traitement pr√©cis.",
      },
      {
        question: "Quelles maladies neurod√©g√©n√©ratives peuvent √™tre analys√©es?",
        answer:
          "Notre IA peut analyser les sympt√¥mes li√©s √† Alzheimer, Parkinson, SLA, maladie de Huntington, Scl√©rose en Plaques et autres conditions neurologiques.",
      },
      {
        question: "Mes informations de sant√© sont-elles s√©curis√©es?",
        answer:
          "Nous ne stockons pas d'informations personnelles de sant√©. Toutes les conversations sont trait√©es de mani√®re s√©curis√©e et ne sont pas sauvegard√©es sur nos serveurs.",
      },
      {
        question: "Puis-je utiliser cet outil pour quelqu'un d'autre?",
        answer:
          "Oui, vous pouvez d√©crire les sympt√¥mes pour des membres de la famille ou d'autres, mais rappelez-vous que c'est √† des fins √©ducatives uniquement.",
      },
      {
        question: "Que dois-je faire apr√®s avoir obtenu les r√©sultats?",
        answer:
          "Utilisez les r√©sultats comme point de d√©part pour discuter avec des professionnels de la sant√©. Planifiez des rendez-vous avec des sp√©cialistes recommand√©s pour une √©valuation appropri√©e.",
      },
    ],
  },
};

export default function MedicalDiagnosticTool() {
  const [language, setLanguage] = useState("en");
  const [activeTab, setActiveTab] = useState("diagnosis");
  const [symptoms, setSymptoms] = useState("");
  const [question, setQuestion] = useState("");
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [isAsking, setIsAsking] = useState(false);
  const [lastResponse, setLastResponse] = useState("");
  const [chatHistory, setChatHistory] = useState([]);

  const t = translations[language];

  const downloadChat = useCallback(() => {
    const chatContent = chatHistory
      .map((item, index) => {
        return `${index + 1}. ${item.type === "symptoms" ? "Symptoms" : "Question"}: ${item.input}\n\nResponse: ${item.response}\n\n${"=".repeat(50)}\n\n`;
      })
      .join("");

    const blob = new Blob([chatContent], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `inmind-chat-${new Date().toISOString().split("T")[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }, [chatHistory]);

  const analyzeSymptoms = useCallback(async () => {
    if (!symptoms.trim()) return;

    setIsAnalyzing(true);
    setLastResponse("");

    try {
      const response = await fetch("/api/wikipedia-medical", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          symptoms: symptoms,
          language: language,
        }),
      });

      if (!response.ok) {
        throw new Error(`Server error: ${response.status}`);
      }

      const data = await response.json();

      if (data.error) {
        throw new Error(data.error);
      }

      setLastResponse(data.response);

      // Add to chat history
      const newEntry = {
        type: "symptoms",
        input: symptoms,
        response: data.response,
        timestamp: new Date().toISOString(),
      };
      setChatHistory((prev) => [...prev, newEntry]);
    } catch (error) {
      console.error("Error analyzing symptoms:", error);
      setLastResponse(
        "Sorry, there was an error fetching medical information. Please try again later.",
      );
    } finally {
      setIsAnalyzing(false);
    }
  }, [symptoms, language]);

  const askMedicalQuestion = useCallback(async () => {
    if (!question.trim()) return;

    setIsAsking(true);
    setLastResponse("");

    try {
      const response = await fetch("/api/wikipedia-medical", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          question: question,
          language: language,
        }),
      });

      if (!response.ok) {
        throw new Error(`Server error: ${response.status}`);
      }

      const data = await response.json();

      if (data.error) {
        throw new Error(data.error);
      }

      setLastResponse(data.response);

      // Add to chat history
      const newEntry = {
        type: "question",
        input: question,
        response: data.response,
        timestamp: new Date().toISOString(),
      };
      setChatHistory((prev) => [...prev, newEntry]);
    } catch (error) {
      console.error("Error asking question:", error);
      setLastResponse(
        "Sorry, there was an error fetching medical information. Please try again later.",
      );
    } finally {
      setIsAsking(false);
    }
  }, [question, language]);

  return (
    <div className="min-h-screen bg-black">
      <div className="container mx-auto px-4 py-8 max-w-4xl">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="bg-black rounded-lg p-6 mb-4">
            <h1
              className="text-5xl font-bold text-white"
              style={{ fontFamily: "Hiragino Mincho ProN, serif" }}
            >
              {t.title}
            </h1>
          </div>
          <p className="text-xl text-gray-300 mb-4">{t.subtitle}</p>

          {/* Language Selector */}
          <div className="flex items-center justify-center gap-2 mb-6">
            <Globe className="w-5 h-5 text-gray-400" />
            <div className="flex gap-2">
              {Object.entries(languages).map(([code, lang]) => (
                <button
                  key={code}
                  onClick={() => setLanguage(code)}
                  className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${
                    language === code
                      ? "bg-white text-black"
                      : "bg-gray-800 text-gray-300 hover:bg-gray-700"
                  }`}
                >
                  {lang.flag} {lang.name}
                </button>
              ))}
            </div>
          </div>

          {/* Download Chat Button */}
          {chatHistory.length > 0 && (
            <div className="mb-4">
              <button
                onClick={downloadChat}
                className="bg-white text-black px-4 py-2 rounded-lg font-medium hover:bg-gray-200 flex items-center gap-2 mx-auto"
              >
                <Download className="w-4 h-4" />
                {t.downloadChat}
              </button>
            </div>
          )}

          {/* Disclaimer */}
          <div className="bg-gray-900 border border-gray-700 rounded-lg p-4 mb-6">
            <div className="flex items-start gap-2">
              <AlertTriangle className="w-5 h-5 text-yellow-500 mt-0.5 flex-shrink-0" />
              <p className="text-sm text-gray-300">{t.disclaimer}</p>
            </div>
          </div>
        </div>

        {/* Tab Navigation */}
        <div className="flex bg-gray-900 rounded-lg p-1 mb-6 shadow-sm border border-gray-800">
          <button
            onClick={() => setActiveTab("diagnosis")}
            className={`flex-1 flex items-center justify-center gap-2 py-3 px-4 rounded-md font-medium transition-colors ${
              activeTab === "diagnosis"
                ? "bg-white text-black"
                : "text-gray-400 hover:text-gray-200"
            }`}
          >
            <Stethoscope className="w-5 h-5" />
            {t.diagnosisTab}
          </button>
          <button
            onClick={() => setActiveTab("questions")}
            className={`flex-1 flex items-center justify-center gap-2 py-3 px-4 rounded-md font-medium transition-colors ${
              activeTab === "questions"
                ? "bg-white text-black"
                : "text-gray-400 hover:text-gray-200"
            }`}
          >
            <MessageCircle className="w-5 h-5" />
            {t.questionsTab}
          </button>
          <button
            onClick={() => setActiveTab("faq")}
            className={`flex-1 flex items-center justify-center gap-2 py-3 px-4 rounded-md font-medium transition-colors ${
              activeTab === "faq"
                ? "bg-white text-black"
                : "text-gray-400 hover:text-gray-200"
            }`}
          >
            <HelpCircle className="w-5 h-5" />
            {t.faqTab}
          </button>
        </div>

        {/* Content */}
        <div className="bg-gray-900 rounded-lg shadow-lg p-6 border border-gray-800">
          {activeTab === "diagnosis" ? (
            <div>
              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  {t.symptomsPlaceholder.split("(")[0]}
                </label>
                <textarea
                  value={symptoms}
                  onChange={(e) => setSymptoms(e.target.value)}
                  placeholder={t.symptomsPlaceholder}
                  className="w-full h-32 p-3 bg-gray-800 border border-gray-700 rounded-lg focus:ring-2 focus:ring-white focus:border-transparent resize-none text-gray-200 placeholder-gray-500"
                />
              </div>

              <button
                onClick={analyzeSymptoms}
                disabled={isAnalyzing || !symptoms.trim()}
                className="w-full bg-white text-black py-3 px-6 rounded-lg font-medium hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
              >
                {isAnalyzing ? (
                  <>
                    <div className="w-5 h-5 border-2 border-black border-t-transparent rounded-full animate-spin" />
                    {t.analyzing}
                  </>
                ) : (
                  <>
                    <ArrowRight className="w-5 h-5" />
                    {t.analyze}
                  </>
                )}
              </button>
            </div>
          ) : activeTab === "questions" ? (
            <div>
              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  {t.questionPlaceholder.split("...")[0]}
                </label>
                <textarea
                  value={question}
                  onChange={(e) => setQuestion(e.target.value)}
                  placeholder={t.questionPlaceholder}
                  className="w-full h-32 p-3 bg-gray-800 border border-gray-700 rounded-lg focus:ring-2 focus:ring-white focus:border-transparent resize-none text-gray-200 placeholder-gray-500"
                />
              </div>

              <button
                onClick={askMedicalQuestion}
                disabled={isAsking || !question.trim()}
                className="w-full bg-white text-black py-3 px-6 rounded-lg font-medium hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
              >
                {isAsking ? (
                  <>
                    <div className="w-5 h-5 border-2 border-black border-t-transparent rounded-full animate-spin" />
                    {t.asking}
                  </>
                ) : (
                  <>
                    <Lightbulb className="w-5 h-5" />
                    {t.askQuestion}
                  </>
                )}
              </button>
            </div>
          ) : (
            <div>
              <h3 className="text-2xl font-bold text-gray-200 mb-6">
                {t.faqTitle}
              </h3>
              <div className="space-y-4">
                {t.faqs.map((faq, index) => (
                  <div
                    key={index}
                    className="border border-gray-700 rounded-lg p-4 bg-gray-800"
                  >
                    <h4 className="font-semibold text-gray-200 mb-2">
                      {faq.question}
                    </h4>
                    <p className="text-gray-400">{faq.answer}</p>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Results - only show for diagnosis and questions tabs */}
          {activeTab !== "faq" && lastResponse && (
            <div className="mt-8 border-t border-gray-700 pt-6">
              <h3 className="text-lg font-semibold text-gray-200 mb-4 flex items-center gap-2">
                <Lightbulb className="w-5 h-5 text-white" />
                {activeTab === "diagnosis" ? t.results : t.answer}
              </h3>
              <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
                <div className="prose prose-sm max-w-none text-gray-300 whitespace-pre-wrap">
                  {lastResponse}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
